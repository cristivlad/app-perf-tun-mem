after code is compiled (with javac) the .java is transformed into .class (which is bytecode). While the app is running, JIT compiler kicks in and if a particular part of code is running more, it will be compiled into native code (OS native)

- when running a program with vm: -XX:+PrintCompilation we get details of the compiled code:
	- first col is number of miliseconds the jvm took to reach that step
	- second col is order of compilation
	- third col: n means native, s means synchronized, % means compiled code is in cache code, ! some exceptions are handled
	- fourth col: numbers 1-4 are level of compilation (4 is max)

- there are 2 JIT compilers
	- C1: which compiles to native level 1, 2, 3
	- C2: which compiles to native level 4
	- jvm decides which level will be compiled depending on how often the code is called and how complex/time consuming it is (it is being profiled). if it continues to call the method which is level 4, then it will place that method/code in the code cache - special area of memory, quickest way to access the code.

- -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation will create a file with details of code compilation
- codeCache is limited and if it is full a message will appear: 'VM warning: CodeCache is full. Compiler has been disabled.'
	- -XX:+PrintCodeCache
	- we can adapt the codeCache size via 3 arguments (if needed)
		- InitialCodeCacheSize - size of codeCache when the application starts ~ 160kb
		- ReservedCodeCacheSize - max of the codeCache size meaning it can grow up to this value
		- CodeCacheExpansionSize - how quickly it grows

- native compilation tuning
	- -XX:CICompilerCount=n - number of threads used for compilation (default is 3?)
	- -XX:CompileThreshold=n - number of times the method should be called to recompile (obviously is more than number of times is run)